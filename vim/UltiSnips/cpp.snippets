## Headers {{{
################################################################################
snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */
endsnippet

################################################################################
snippet inc "Include header"
#include <${1}>
endsnippet

################################################################################
snippet inc" "Include header"
#include "${1}"
endsnippet
## }}}
## Loops {{{
################################################################################
snippet fori "for loop with int i"
for (int i = 0; i < ${1}; ++i) {
	${2}
}
endsnippet

################################################################################
snippet forr "for loop with range"
for (auto&& ${1}: ${2}) {
	$1;
}
endsnippet
## }}}
## Annotations {{{
################################################################################
snippet depr "Deprecated"
// FIXME DEPRECATED
endsnippet
## }}}
## Comments {{{
################################################################################
snippet /* "regular comment"
/* ${1} */
endsnippet
snippet /** "doxygen comment"
/**
 * ${1}
 */
endsnippet
## }}}
## Qt {{{
################################################################################
snippet qprm
Q_PROPERTY(${1} ${2} MEMBER $2_ NOTIFY $2Changed);
endsnippet
snippet qprw
Q_PROPERTY(${1} ${2} READ $2 WRITE set${2/\w+\s*/\u$0/} NOTIFY $2Changed);
endsnippet
## }}}
## Exceptions {{{
################################################################################
snippet try "try/catch block"
try {
	
} catch (const ${2}& e) {
	
}
endsnippet
################################################################################
snippet try... "try/catch(...) block"
try {
	
} catch (...) {
	
}
endsnippet
## }}}
## GTest {{{
################################################################################
snippet incgt "include gtest"
#include <gtest/gtest.h>
endsnippet
################################################################################
snippet fixt "define a fixture"
struct ${1}Test: public testing::Test {
	$1 ${2};
	void SetUp() {}
	void TearDown() {}
};
endsnippet
################################################################################
snippet test "define a TEST"
TEST(${1}Test, ${2}) {
	
}
endsnippet
################################################################################
snippet testf "define a TEST_F"
TEST_F(${1}Test, ${2}) {
	
}
endsnippet
## }}}
## Misc {{{
################################################################################
snippet usns "using namespace"
using namespace ${1};
endsnippet
## }}}
# vim:foldmethod=marker:foldlevel=0
